const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
class ConfigGenerator {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async question(query) {
    return new Promise(resolve => {
      this.rl.question(query, resolve);
    });
  }

  async generateConfig() {
    console.log('üõ†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Universal Static Generator\n');
    console.log('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:\n');

    const config = {};

    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    config.projectName = await this.question('üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ');
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    const projectRoot = await this.question('üìÅ –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞): ') || process.cwd();
    config.projectRoot = path.resolve(projectRoot);

    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    const detectedStructure = this.analyzeProjectStructure(config.projectRoot);
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\n');

    // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
    if (detectedStructure.hasClient) {
      config.clientDir = detectedStructure.clientDir;
      console.log(`üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å: ${config.clientDir}`);
    } else {
      config.clientDir = await this.question('üì± –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: client, src, frontend): ') || 'src';
    }

    // –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å
    if (detectedStructure.hasServer) {
      config.serverDir = detectedStructure.serverDir;
      console.log(`‚öôÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å: ${config.serverDir}`);
    } else {
      const hasServer = await this.question('‚öôÔ∏è  –ï—Å—Ç—å –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å? (y/n): ');
      if (hasServer.toLowerCase() === 'y') {
        config.serverDir = await this.question('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: server, backend, api): ') || 'server';
      }
    }

    // –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏
    config.buildCommand = detectedStructure.buildCommand || 
      await this.question('üî® –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: npm run build): ') || 'npm run build';

    // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏
    config.distDir = detectedStructure.distDir || 
      await this.question('üì¶ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: dist, build): ') || 'dist';

    // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:');
    
    config.hasAuth = (await this.question('üîê –ï—Å—Ç—å –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏? (y/n): ')).toLowerCase() === 'y';
    config.hasAdmin = (await this.question('üë®‚Äçüíº –ï—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å? (y/n): ')).toLowerCase() === 'y';
    config.hasUploads = (await this.question('üì§ –ï—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤? (y/n): ')).toLowerCase() === 'y';

    // –¢–∏–ø—ã —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤
    console.log('\nüåê –¢–∏–ø—ã —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
    const allTargets = ['static', 'php', 'vercel', 'netlify', 'apache', 'nginx'];
    config.targets = [];

    for (const target of allTargets) {
      const include = (await this.question(`  –í–∫–ª—é—á–∏—Ç—å ${target}? (y/n): `)).toLowerCase() === 'y';
      if (include) {
        config.targets.push(target);
      }
    }

    if (config.targets.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞. –î–æ–±–∞–≤–ª—è—é static –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
      config.targets = ['static'];
    }

    // API –º–∞—Ä—à—Ä—É—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä)
    if (config.serverDir) {
      console.log('\nüõ£Ô∏è  API –º–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞');
      config.apiRoutes = []; // –ë—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config.outputDir = 'static-bundles';

    this.rl.close();

    return config;
  }

  analyzeProjectStructure(projectRoot) {
    const structure = {
      hasClient: false,
      hasServer: false,
      clientDir: null,
      serverDir: null,
      buildCommand: null,
      distDir: null
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const dirs = fs.readdirSync(projectRoot, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);

      // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
      const clientDirs = ['client', 'src', 'frontend', 'web', 'app'];
      for (const dir of clientDirs) {
        if (dirs.includes(dir)) {
          const indexFiles = ['index.html', 'index.tsx', 'index.ts', 'index.js', 'main.tsx', 'main.ts', 'main.js'];
          const dirPath = path.join(projectRoot, dir);
          
          if (fs.existsSync(dirPath)) {
            const files = fs.readdirSync(dirPath);
            if (indexFiles.some(file => files.includes(file))) {
              structure.hasClient = true;
              structure.clientDir = dir;
              break;
            }
          }
        }
      }

      // –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
      const serverDirs = ['server', 'backend', 'api', 'src/server'];
      for (const dir of serverDirs) {
        if (dirs.includes(dir) || fs.existsSync(path.join(projectRoot, dir))) {
          const serverFiles = ['index.js', 'index.ts', 'server.js', 'server.ts', 'app.js', 'app.ts'];
          const dirPath = path.join(projectRoot, dir);
          
          if (fs.existsSync(dirPath)) {
            const files = fs.readdirSync(dirPath);
            if (serverFiles.some(file => files.includes(file))) {
              structure.hasServer = true;
              structure.serverDir = dir;
              break;
            }
          }
        }
      }

      // –ê–Ω–∞–ª–∏–∑ package.json
      const packageJsonPath = path.join(projectRoot, 'package.json');
      if (fs.existsSync(packageJsonPath)) {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏
        if (packageJson.scripts) {
          if (packageJson.scripts.build) {
            structure.buildCommand = 'npm run build';
          } else if (packageJson.scripts['build:client']) {
            structure.buildCommand = 'npm run build:client';
          }
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
      const buildDirs = ['dist', 'build', 'out', 'public'];
      for (const dir of buildDirs) {
        if (dirs.includes(dir)) {
          structure.distDir = dir;
          break;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Vite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const viteConfigs = ['vite.config.js', 'vite.config.ts'];
      for (const config of viteConfigs) {
        if (fs.existsSync(path.join(projectRoot, config))) {
          if (!structure.distDir) {
            structure.distDir = 'dist';
          }
          break;
        }
      }

    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
    }

    return structure;
  }

  async saveConfig(config) {
    const configPath = path.join(config.projectRoot, 'static-generator.config.js');
    
    const configContent = `// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Universal Static Generator
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ${new Date().toLocaleString('ru-RU')}

const UniversalStaticGenerator = require('./universal-static-generator');

const projectConfig = ${JSON.stringify(config, null, 2)};

async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—Ä–æ–∫ –¥–ª—è ${config.projectName}\\n');
    
    const generator = new UniversalStaticGenerator(projectConfig);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–±–æ—Ä–∫–∏
    await generator.generateStaticBundles();
    
    // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤—ã
    await generator.createArchives();
    
    console.log('\\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\\nüì¶ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏:');
    
    projectConfig.targets.forEach(target => {
      console.log(\`  - \${target}: static-bundles/\${target}/\`);
    });
    
    console.log('\\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: static-bundles/_docs/');
    console.log('\\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –∏–∑ —Å–±–æ—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ!');
    
  } catch (error) {
    console.error('\\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
if (require.main === module) {
  main();
}

module.exports = { projectConfig, main };
`;

    fs.writeFileSync(configPath, configContent);
    console.log(`\nüìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${configPath}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ package.json —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const packageJsonPath = path.join(config.projectRoot, 'package.json');
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      
      if (!packageJson.scripts) {
        packageJson.scripts = {};
      }
      
      if (!packageJson.scripts['generate-static']) {
        packageJson.scripts['generate-static'] = 'node static-generator.config.js';
        fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        console.log('üì¶ –î–æ–±–∞–≤–ª–µ–Ω npm —Å–∫—Ä–∏–ø—Ç: npm run generate-static');
      }
    }

    return configPath;
  }

  async run() {
    try {
      const config = await this.generateConfig();
      
      console.log('\nüìã –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
      console.log(JSON.stringify(config, null, 2));
      
      const save = await this.question('\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n): ');
      if (save.toLowerCase() === 'y') {
        const configPath = await this.saveConfig(config);
        
        const runNow = await this.question('\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–π—á–∞—Å? (y/n): ');
        if (runNow.toLowerCase() === 'y') {
          const UniversalStaticGenerator = require('./universal-static-generator');
          const generator = new UniversalStaticGenerator(config);
          await generator.generateStaticBundles();
          await generator.createArchives();
          
          console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        } else {
          console.log(`\nüëâ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node ${path.basename(configPath)}`);
          console.log('üì¶ –ò–ª–∏: npm run generate-static');
        }
      }
      
    } catch (error) {
      console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
      this.rl.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (require.main === module) {
  const configGen = new ConfigGenerator();
  configGen.run();
}

module.exports = ConfigGenerator; 